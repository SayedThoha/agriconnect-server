"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const userRepository_1 = __importDefault(require("../repositories/user/userRepository"));
const userController_1 = __importDefault(require("../controllers/user/userController"));
const googleAuthRepository_1 = __importDefault(require("../repositories/googleAuth/googleAuthRepository"));
const googleAuthService_1 = __importDefault(require("../services/googleAuthService"));
const googleAuthController_1 = __importDefault(require("../controllers/googleAuthController"));
const userService_1 = __importDefault(require("../services/user/userService"));
const userAuth_1 = require("../middlewares/userAuth");
const chatController_1 = __importDefault(require("../controllers/chat/chatController"));
const chatRepository_1 = __importDefault(require("../repositories/chat/chatRepository"));
const chatService_1 = __importDefault(require("../services/chat/chatService"));
// import { checkUserBlocked } from "../middlewares/userAuth";
const userRouter = express_1.default.Router();
const userRepository = new userRepository_1.default();
const userService = new userService_1.default(userRepository);
const userController = new userController_1.default(userService);
const chatRepository = new chatRepository_1.default();
const chatService = new chatService_1.default(chatRepository);
const chatController = new chatController_1.default(chatService);
const googleAuthRepository = new googleAuthRepository_1.default(process.env.GOOGLE_CLIENT_ID, userRepository);
const googleAuthService = new googleAuthService_1.default(googleAuthRepository);
const googleAuthController = new googleAuthController_1.default(googleAuthService);
userRouter.post("/userRegister", (req, res) => userController.registerUser(req, res));
userRouter.post("/resendOtp", (req, res) => userController.resendOtp(req, res));
userRouter.post("/verifyOtp", (req, res) => userController.verifyOtp(req, res));
userRouter.post("/login", (req, res) => userController.login(req, res));
userRouter.post("/googleLogin", (req, res) => googleAuthController.login(req, res));
userRouter.get("/getuserDetails", userAuth_1.userAuth, (req, res) => userController.getUserDetails(req, res));
userRouter.post("/editUserProfile_name", (req, res) => userController.editUserProfile(req, res));
userRouter.post("/opt_for_new_email", (req, res) => userController.optForNewEmail(req, res));
userRouter.post("/edit_user_profile_picture", (req, res) => userController.editUserProfilePicture(req, res));
userRouter.get("/status/:id", userAuth_1.userAuth, (req, res) => userController.checkUserStatus(req, res));
userRouter.post("/verifyEmail", (req, res) => userController.verifyEmailForPasswordReset(req, res));
userRouter.patch("/updatePassword", (req, res) => userController.updatePassword(req, res));
userRouter.post("/auth/refresh-token", (req, res) => userController.refreshToken(req, res));
userRouter.get("/getSpecialisation", (req, res) => userController.getSpecialisation(req, res));
userRouter.get("/getExperts", (req, res) => userController.getExperts(req, res));
userRouter.get("/getExpertDetails", userAuth_1.userAuth, (req, res) => userController.getExpertDetails(req, res));
userRouter.get("/getSlots", userAuth_1.userAuth, (req, res) => userController.getExpertSlots(req, res));
userRouter.post("/addSlots", userAuth_1.userAuth, (req, res) => userController.addSlots(req, res));
userRouter.get("/getSlot", userAuth_1.userAuth, (req, res) => userController.getSlot(req, res));
userRouter.get("/check_if_the_slot_available", userAuth_1.userAuth, (req, res) => userController.checkSlotAvailability(req, res));
userRouter.post("/booking_payment", (req, res) => userController.createBookingPayment(req, res));
userRouter.post("/appointment_booking", (req, res) => userController.appointmentBooking(req, res));
userRouter.get("/userDetails", (req, res) => userController.userDetails(req, res));
userRouter.get("/get_booking_details", (req, res) => userController.getBookingDetails(req, res));
userRouter.get("/cancelSlot", (req, res) => userController.cancelSlot(req, res));
userRouter.get("/upcoming_appointment", (req, res) => userController.upcomingAppointment(req, res));
userRouter.get("/getUpcomingSlot", (req, res) => userController.getUpcomingSlot(req, res));
userRouter.get("/userAccessChat", (req, res) => chatController.userAccessChat(req, res));
userRouter.get("/userFetchAllChat", (req, res) => chatController.userFetchAllChat(req, res));
userRouter.post("/sendMessage", (req, res) => chatController.sendMessage(req, res));
userRouter.get("/userFetchAllMessages", (req, res) => chatController.userFetchAllMessages(req, res));
userRouter.get("/get_prescription_details", (req, res) => userController.getPrescriptionDetails(req, res));
userRouter.get("/notifications", (req, res) => userController.getNotifications(req, res));
userRouter.put("/notifications/mark-as-read", (req, res) => userController.markNotificationAsRead(req, res));
userRouter.put("/notifications/clear", (req, res) => userController.clearNotifications(req, res));
exports.default = userRouter;
