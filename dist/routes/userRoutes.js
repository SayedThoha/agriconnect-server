"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const userRepository_1 = __importDefault(require("../repositories/user/userRepository"));
const userController_1 = __importDefault(require("../controllers/user/userController"));
const googleAuthRepository_1 = __importDefault(require("../repositories/googleAuth/googleAuthRepository"));
const googleAuthService_1 = __importDefault(require("../services/googleAuthService"));
const googleAuthController_1 = __importDefault(require("../controllers/googleAuthController"));
const userService_1 = __importDefault(require("../services/user/userService"));
const userAuth_1 = require("../middlewares/userAuth");
// import { checkUserBlocked } from "../middlewares/userAuth";
const userRouter = express_1.default.Router();
const userRepository = new userRepository_1.default();
const userService = new userService_1.default(userRepository);
const userController = new userController_1.default(userService);
const googleAuthRepository = new googleAuthRepository_1.default(process.env.GOOGLE_CLIENT_ID, userRepository);
const googleAuthService = new googleAuthService_1.default(googleAuthRepository);
const googleAuthController = new googleAuthController_1.default(googleAuthService);
userRouter.post("/userRegister", (req, res) => userController.registerUser(req, res));
userRouter.post("/resendOtp", (req, res) => userController.resendOtp(req, res));
userRouter.post("/verifyOtp", (req, res) => userController.verifyOtp(req, res));
userRouter.post("/login", (req, res) => userController.login(req, res));
userRouter.post("/googleLogin", (req, res) => googleAuthController.login(req, res));
userRouter.get("/getuserDetails", userAuth_1.userAuth, (req, res) => userController.getUserDetails(req, res));
userRouter.post("/editUserProfile_name", userAuth_1.userAuth, (req, res) => userController.editUserProfile(req, res));
userRouter.post("/opt_for_new_email", userAuth_1.userAuth, (req, res) => userController.optForNewEmail(req, res));
userRouter.post("/edit_user_profile_picture", userAuth_1.userAuth, (req, res) => userController.editUserProfilePicture(req, res));
userRouter.get("/status/:id", userAuth_1.userAuth, (req, res) => userController.checkUserStatus(req, res));
userRouter.post("/verifyEmail", (req, res) => userController.verifyEmailForPasswordReset(req, res));
userRouter.post("/updatePassword", userAuth_1.userAuth, (req, res) => userController.updatePassword(req, res));
userRouter.post("/auth/refresh-token", (req, res) => userController.refreshToken(req, res));
exports.default = userRouter;
